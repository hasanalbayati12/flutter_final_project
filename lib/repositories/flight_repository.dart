import '../models/flight.dart';
import '../database/database.dart';
import '../database/daos/flight_dao.dart';

/// Repository class for managing Flight data operations
class FlightRepository {
  late FlightDao _flightDao;
  bool _initialized = false;

  /// Initializes the database connection
  Future<void> _initializeDatabase() async {
    if (!_initialized) {
      final database = await AppDatabase.getInstance();
      _flightDao = database.flightDao;
      _initialized = true;
    }
  }

  /// Inserts a new flight into the database
  /// [flight] - Flight object to be inserted (id should be null for new flights)
  /// Returns the ID of the inserted flight (auto-generated by Floor)
  /// Throws exception if insertion fails
  Future<int> insertFlight(Flight flight) async {
    try {
      await _initializeDatabase();
      await _flightDao.insertFlight(flight);

      // Get the auto-generated ID by finding the last inserted flight
      final flights = await _flightDao.findAllFlights();
      return flights.isNotEmpty ? flights.last.id! : 0;
    } catch (e) {
      throw Exception('Failed to insert flight: $e');
    }
  }

  /// Retrieves all flights from the database
  /// Returns a list of all Flight objects
  /// Returns empty list if no flights found
  /// Throws exception if retrieval fails
  Future<List<Flight>> getAllFlights() async {
    try {
      await _initializeDatabase();
      final flights = await _flightDao.findAllFlights();
      return flights;
    } catch (e) {
      throw Exception('Failed to retrieve flights: $e');
    }
  }

  /// Retrieves a specific flight by ID
  /// [id] - ID of the flight to retrieve
  /// Returns Flight object if found, null otherwise
  /// Throws exception if retrieval fails
  Future<Flight?> getFlightById(int id) async {
    try {
      await _initializeDatabase();
      return await _flightDao.findFlightById(id);
    } catch (e) {
      throw Exception('Failed to retrieve flight by ID: $e');
    }
  }

  /// Updates an existing flight in the database
  /// [flight] - Flight object with updated information
  /// Returns 1 if update successful, 0 if flight not found
  /// Throws exception if update fails
  Future<int> updateFlight(Flight flight) async {
    try {
      await _initializeDatabase();
      if (flight.id == null) {
        throw Exception('Cannot update flight: ID is null');
      }
      await _flightDao.updateFlight(flight);
      return 1;
    } catch (e) {
      throw Exception('Failed to update flight: $e');
    }
  }

  /// Deletes a flight from the database
  /// [id] - ID of the flight to delete
  /// Returns 1 if deletion successful, 0 if flight not found
  /// Throws exception if deletion fails
  Future<int> deleteFlight(int id) async {
    try {
      await _initializeDatabase();
      await _flightDao.delete(id);
      return 1;
    } catch (e) {
      throw Exception('Failed to delete flight: $e');
    }
  }

  /// Gets the count of total flights
  /// Returns the number of flights in the database
  Future<int> getFlightCount() async {
    try {
      await _initializeDatabase();
      return await _flightDao.getFlightCount() ?? 0;
    } catch (e) {
      throw Exception('Failed to get flight count: $e');
    }
  }

  /// Validates flight data before database operations
  /// [flight] - Flight object to validate
  /// Returns true if valid, throws exception with details if invalid
  bool validateFlight(Flight flight) {
    if (flight.departureCity.trim().isEmpty) {
      throw Exception('Departure city cannot be empty');
    }
    if (flight.destinationCity.trim().isEmpty) {
      throw Exception('Destination city cannot be empty');
    }
    if (flight.departureTime.trim().isEmpty) {
      throw Exception('Departure time cannot be empty');
    }
    if (flight.arrivalTime.trim().isEmpty) {
      throw Exception('Arrival time cannot be empty');
    }

    return true;
  }
}