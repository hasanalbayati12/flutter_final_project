import '../models/reservation.dart';
import '../database/database.dart';
import '../database/daos/reservation_dao.dart';

/// Repository class for managing Reservation data operations
class ReservationRepository {
  late ReservationDao _reservationDao;
  bool _initialized = false;

  /// Initializes the database connection
  Future<void> _initializeDatabase() async {
    if (!_initialized) {
      final database = await AppDatabase.getInstance();
      _reservationDao = database.reservationDao;
      _initialized = true;
    }
  }

  /// Inserts a new reservation into the database
  /// [reservation] - Reservation object to be inserted (id should be null for new reservations)
  /// Returns the ID of the inserted reservation (auto-generated by Floor)
  /// Throws exception if insertion fails
  Future<int> insertReservation(Reservation reservation) async {
    try {
      await _initializeDatabase();
      await _reservationDao.insertReservation(reservation);

      // Get the auto-generated ID by finding the last inserted reservation
      final reservations = await _reservationDao.findAllReservations();
      return reservations.isNotEmpty ? reservations.last.id! : 0;
    } catch (e) {
      throw Exception('Failed to insert reservation: $e');
    }
  }

  /// Retrieves all reservations from the database
  ///
  /// Returns a list of all Reservation objects
  /// Returns empty list if no reservations found
  /// Throws exception if retrieval fails
  Future<List<Reservation>> getAllReservations() async {
    try {
      await _initializeDatabase();
      final reservations = await _reservationDao.findAllReservations();

      return reservations;
    } catch (e) {
      throw Exception('Failed to retrieve reservations: $e');
    }
  }

  /// Retrieves a specific reservation by ID
  /// [id] - ID of the reservation to retrieve
  /// Returns Reservation object if found, null otherwise
  /// Throws exception if retrieval fails
  Future<Reservation?> getReservationById(int id) async {
    try {
      await _initializeDatabase();
      return await _reservationDao.findReservationById(id);
    } catch (e) {
      throw Exception('Failed to retrieve reservation by ID: $e');
    }
  }

  /// Updates an existing reservation in the database
  /// [reservation] - Reservation object with updated information
  /// Returns 1 if update successful, 0 if reservation not found
  /// Throws exception if update fails
  Future<int> updateReservation(Reservation reservation) async {
    try {
      await _initializeDatabase();
      if (reservation.id == null) {
        throw Exception('Cannot update reservation: ID is null');
      }
      await _reservationDao.updateReservation(reservation);
      return 1;
    } catch (e) {
      throw Exception('Failed to update reservation: $e');
    }
  }

  /// Deletes a reservation from the database
  /// [id] - ID of the reservation to delete
  /// Returns 1 if deletion successful, 0 if reservation not found
  /// Throws exception if deletion fails
  Future<int> deleteReservation(int id) async {
    try {
      await _initializeDatabase();
      await _reservationDao.delete(id);
      return 1;
    } catch (e) {
      throw Exception('Failed to delete reservation: $e');
    }
  }

  /// Gets the count of total reservations
  /// Returns the number of reservations in the database
  Future<int> getReservationCount() async {
    try {
      await _initializeDatabase();
      return await _reservationDao.getReservationCount() ?? 0;
    } catch (e) {
      throw Exception('Failed to get reservation count: $e');
    }
  }

  /// Validates reservation data before database operations
  /// [reservation] - Reservation object to validate
  /// Returns true if valid, throws exception with details if invalid
  bool validateReservation(Reservation reservation) {
    if (reservation.customerId <= 0) {
      throw Exception('Customer ID must be greater than 0');
    }
    if (reservation.flightId <= 0) {
      throw Exception('Flight ID must be greater than 0');
    }
    if (reservation.flightDate.trim().isEmpty) {
      throw Exception('Flight date cannot be empty');
    }
    if (reservation.reservationName.trim().isEmpty) {
      throw Exception('Reservation name cannot be empty');
    }

    final dateRegex = RegExp(r'^\d{4}-\d{2}-\d{2}$');
    if (!dateRegex.hasMatch(reservation.flightDate)) {
      throw Exception('Flight date must be in YYYY-MM-DD format');
    }

    return true;
  }
}