import 'package:floor/floor.dart';

/// Flight entity representing a flight record in the database.
@entity
class Flight {
  @PrimaryKey(autoGenerate: true)
  final int? id;
  final String departureCity;
  final String destinationCity;
  final String departureTime;
  final String arrivalTime;

  /// Constructor for creating a Flight object.
  ///
  /// [id] is optional and auto-generated by Floor if not provided.
  /// [departureCity], [destinationCity], [departureTime], and [arrivalTime] are required.
  Flight({
    this.id,
    required this.departureCity,
    required this.destinationCity,
    required this.departureTime,
    required this.arrivalTime,
  });

  /// Converts this Flight object into a Map for manual database operations.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'departure_city': departureCity,
      'destination_city': destinationCity,
      'departure_time': departureTime,
      'arrival_time': arrivalTime,
    };
  }

  /// Creates a Flight object from a Map retrieved from the database.
  factory Flight.fromMap(Map<String, dynamic> map) {
    return Flight(
      id: map['id'],
      departureCity: map['departure_city'],
      destinationCity: map['destination_city'],
      departureTime: map['departure_time'],
      arrivalTime: map['arrival_time'],
    );
  }

  /// Returns a formatted string of the flight route.
  String get route => '$departureCity → $destinationCity';

  /// Returns a formatted string of the flight schedule.
  String get schedule => 'Depart: $departureTime • Arrive: $arrivalTime';

  /// Returns a new Flight object with updated fields.
  Flight copyWith({
    int? id,
    String? departureCity,
    String? destinationCity,
    String? departureTime,
    String? arrivalTime,
  }) {
    return Flight(
      id: id ?? this.id,
      departureCity: departureCity ?? this.departureCity,
      destinationCity: destinationCity ?? this.destinationCity,
      departureTime: departureTime ?? this.departureTime,
      arrivalTime: arrivalTime ?? this.arrivalTime,
    );
  }

  /// Returns a string representation of the Flight object.
  @override
  String toString() {
    return 'Flight{id: $id, departureCity: $departureCity, destinationCity: $destinationCity, departureTime: $departureTime, arrivalTime: $arrivalTime}';
  }

  /// Compares two Flight objects for equality.
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Flight &&
        other.id == id &&
        other.departureCity == departureCity &&
        other.destinationCity == destinationCity &&
        other.departureTime == departureTime &&
        other.arrivalTime == arrivalTime;
  }

  /// Returns a hash code for the Flight object.
  @override
  int get hashCode {
    return id.hashCode ^
    departureCity.hashCode ^
    destinationCity.hashCode ^
    departureTime.hashCode ^
    arrivalTime.hashCode;
  }
}
