import 'package:floor/floor.dart';

/// Customer data model for the airline management system
/// Represents a customer with personal information and provides
/// database storage capabilities using Floor annotations
@entity
class Customer{
  ///Unique Customer identifier, auto-generated by Floor
  @PrimaryKey(autoGenerate: true)
  final int? id;

  ///Customer's first name
final String firstName;

///Customer's last name
final String lastName;

///Customer's address
final String address;

///Customer's date of birth in YYYY-MM-DD format
final String dateOfBirth;

/// Creates a new Customer instance
/// All fields except [id] are required for new customers
Customer({
    this.id,
  required this.firstName,
  required this.lastName,
  required this.address,
  required this.dateOfBirth,
});

/// Returns the customer's full name
/// Combines first and last name with a space
String get fullName => '$firstName $lastName';

/// Creates a copy of this customer with updated fields
/// Only provided fields will be updated, others remain unchanged
Customer copyWith({
    int? id,
  String? firstName,
  String? lastName,
  String? address,
  String? dateOfBirth,
}) {
  return Customer(
    id: id ?? this.id,
    firstName: firstName ?? this.firstName,
    lastName:  lastName ?? this.lastName,
    address: address ?? this.address,
    dateOfBirth: dateOfBirth ?? this.dateOfBirth,
  );
}
/// Returns a string representation of the customer
/// Includes all customer fields for debugging purposes
@override
  String toString(){
    return'Customer {id: $id, firstName: $firstName, lastName: $lastName, address: $address, dateOfBirth: $dateOfBirth}';
}
/// Checks if two customers are equal
/// Compares all fields including ID, Name, Address, and Date of Birth
@override
  bool operator ==(object other){
    if (identical(this, other)) return true;
    return other is Customer &&
        other.id == id &&
        other.firstName == firstName &&
        other.lastName == lastName &&
        other.address == address &&
        other.dateOfBirth == dateOfBirth;
}

/// Generates hash code for the customer
/// Based on all customer fields for proper map/set usage
@override
  int get hashCode{
    return id.hashCode ^
}

}